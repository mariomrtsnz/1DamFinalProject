<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.3.RELEASE</version>
	</parent>

    <modelVersion>4.0.0</modelVersion>
    <groupId>org.dontpanic</groupId>
    <artifactId>spanners</artifactId>
    <name>Spanners demo applications</name>
    <version>4.6</version>
    <packaging>pom</packaging>
    
    <modules>
        <module>spanners-api</module>
        <module>spanners-mvc</module>
		<module>spanners-database</module>
		<module>spanners-users</module>
		<module>disco</module>
	</modules>

	<properties>
		<!-- Skip docker build by default as docker may not be available.
		     The enableDocker profile will attempt to detect docker and enable the docker build -->
		<docker.skip>true</docker.skip>
		<docker.repository>docker.io</docker.repository>
		<docker.image.prefix>hotblac</docker.image.prefix>
	</properties>

    <scm>
        <connection>scm:git:https://github.com/hotblac/spanners.git</connection>
        <developerConnection>scm:git:https://github.com/hotblac/spanners.git</developerConnection>
      <tag>spanners-4.6</tag>
	</scm>

    <distributionManagement>
		<repository>
		  <id>maven-disasterarea-ftp</id>
		  <url>ftp://maven.disasterarea.co.uk/maven</url>
		</repository>
    </distributionManagement>


	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>Dalston.SR1</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

    <build>
		<plugins>
			<plugin>
				<artifactId>maven-release-plugin</artifactId>
				<version>2.4.1</version>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.scm</groupId>
						<artifactId>maven-scm-api</artifactId>
						<version>1.8.1</version>
					</dependency>
					<dependency>
						<groupId>org.apache.maven.scm</groupId>
						<artifactId>maven-scm-provider-gitexe</artifactId>
						<version>1.8.1</version>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>

		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>com.spotify</groupId>
					<artifactId>docker-maven-plugin</artifactId>
					<version>0.4.13</version>
					<configuration>
						<imageName>${docker.image.prefix}/${project.artifactId}</imageName>
						<baseImage>java:openjdk-8-jdk-alpine</baseImage>
						<entryPoint>["java","-Djava.security.egd=file:/dev/./urandom","-jar","/${project.build.finalName}.jar"]</entryPoint>
						<serverId>docker-hub</serverId>
						<skipDocker>${docker.skip}</skipDocker>
						<resources>
							<!-- copy the service's jar file from target into the root directory of the image -->
							<resource>
								<targetPath>/</targetPath>
								<directory>${project.build.directory}</directory>
								<include>${project.build.finalName}.jar</include>
							</resource>
							<!-- Copy contents of project's docker directory, if it exists.
							     Used to pull in docker build specific application.properties settings -->
							<resource>
								<targetPath>/</targetPath>
								<directory>${project.basedir}/docker</directory>
								<include>*</include>
							</resource>
						</resources>
					</configuration>
					<executions>
						<execution>
							<id>build-image</id>
							<phase>package</phase>
							<goals>
								<goal>build</goal>
							</goals>
						</execution>
						<execution>
							<id>tag-image-version</id>
							<phase>deploy</phase>
							<goals>
								<goal>tag</goal>
							</goals>
							<configuration>
								<image>${docker.image.prefix}/${project.artifactId}</image>
								<newName>${docker.repository}/${docker.image.prefix}/${project.artifactId}:${project.version}</newName>
								<pushImage>true</pushImage>
							</configuration>
						</execution>
						<execution>
							<id>tag-image-latest</id>
							<phase>deploy</phase>
							<goals>
								<goal>tag</goal>
							</goals>
							<configuration>
								<image>${docker.image.prefix}/${project.artifactId}</image>
								<newName>${docker.repository}/${docker.image.prefix}/${project.artifactId}:latest</newName>
								<pushImage>true</pushImage>
							</configuration>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>

		<extensions>
		<!-- Enabling the use of FTP -->
			<extension>
				<groupId>org.apache.maven.wagon</groupId>
				<artifactId>wagon-ftp</artifactId>
				<version>2.9</version>
			</extension>
		</extensions>
    </build>

	<profiles>
		<profile>
			<id>enableDocker-linux</id>
			<properties>
				<docker.skip>false</docker.skip>
			</properties>
			<activation>
				<!-- Activate on Linux systems. Assume presence of docker.pid file indicates Docker is available -->
				<file>
					<exists>/var/run/docker.pid</exists>
				</file>
			</activation>
		</profile>
		<profile>
			<id>enableDocker-win10</id>
			<properties>
				<docker.skip>false</docker.skip>
			</properties>
			<activation>
				<!-- Activate on Windows 10 systems with native Docker. Check for docker.exe in default install directory -->
				<file>
					<exists>C:\Program Files\Docker\Docker\resources\bin\docker.exe</exists>
				</file>
			</activation>
		</profile>
		<profile>
			<id>enableDocker-toolbox</id>
			<properties>
				<docker.skip>false</docker.skip>
			</properties>
			<activation>
					<!-- Activate on Windows (Docker Toolbox) systems. Assume presence of DOCKER_HOST indicates Docker is available -->
				<property>
					<name>env.DOCKER_HOST</name>
				</property>
			</activation>
		</profile>
	</profiles>

</project>
